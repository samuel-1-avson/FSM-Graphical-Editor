{# fsm_designer_project/assets/templates/generate_slx.m.j2 - Jinja2 Template for Simulink Model Generation #}
% =================================================================================
% MATLAB Script for FSM Model Generation
%
% Model Name:    {{ model_name }}
% Generated by:   {{ app_name }} v{{ app_version }}
% Generated on:   {{ timestamp }}
%
% Description:
% This script programmatically creates a Simulink model with a Stateflow chart
% based on the provided FSM data structure.
% =================================================================================

try
    fprintf('=== Starting Simulink Model Generation for "%s" ===\n', '{{ model_name }}');
    
    % --- Configuration ---
    modelName = '{{ model_name }}';
    outputDir = '{{ output_dir | replace('\\', '/') }}';
    fullPath = fullfile(outputDir, [modelName, '.slx']);
    
    % --- Cleanup and Setup ---
    % Close the model if it's already open to avoid conflicts
    if bdIsLoaded(modelName)
        fprintf('Model "%s" is already loaded. Closing it before regeneration.\n', modelName);
        close_system(modelName, 0);
    end
    
    % Delete existing file if it exists
    if exist(fullPath, 'file')
        fprintf('Deleting existing model file: %s\n', fullPath);
        delete(fullPath);
    end

    % --- Model Creation ---
    fprintf('Creating new Simulink model...\n');
    new_system(modelName);
    
    % Add Stateflow Chart
    fprintf('Adding Stateflow chart...\n');
    chartPath = [modelName, '/FSM_Chart'];
    sf = sfnew;
    add_block('sflib/Chart', chartPath);
    chart = find(sfroot, '-isa', 'Stateflow.Chart', 'Path', chartPath);
    
    % --- State Creation ---
    stateMap = containers.Map('KeyType', 'char', 'ValueType', 'any');
    fprintf('Creating %d states...\n', {{ states | length }});
    
    {% for state in states %}
    try
        stateName = '{{ state.name | replace("'", "''") }}';
        fprintf('  - Creating state: %s\n', stateName);
        
        s = Stateflow.State(chart);
        s.Name = stateName;
        s.Position = [{{ state.properties.get('x', loop.index * 150) }}, {{ state.properties.get('y', 100) }}, {{ state.properties.get('width', 120) }}, {{ state.properties.get('height', 80) }}];
        
        % Build the label string with actions
        labelString = sprintf('%s', stateName);
        {% if state.entry_action and state.entry_action.code %}
        labelString = [labelString, sprintf('\nentry: {{ state.entry_action.code | replace('%', '%%') | replace('\n', '; ') | replace("'", "''") }}')];
        {% endif %}
        {% if state.during_action and state.during_action.code %}
        labelString = [labelString, sprintf('\nduring: {{ state.during_action.code | replace('%', '%%') | replace('\n', '; ') | replace("'", "''") }}')];
        {% endif %}
        {% if state.exit_action and state.exit_action.code %}
        labelString = [labelString, sprintf('\nexit: {{ state.exit_action.code | replace('%', '%%') | replace('\n', '; ') | replace("'", "''") }}')];
        {% endif %}
        s.LabelString = labelString;
        
        stateMap(stateName) = s;

        {% if state.is_initial %}
        fprintf('    * Setting as default transition target.\n');
        chart.DefaultTransition.Destination = s;
        {% endif %}
    catch stateErr
        warning('Could not create state "%s": %s', stateName, stateErr.message);
    end
    {% endfor %}

    % --- Transition Creation ---
    fprintf('Creating %d transitions...\n', {{ transitions | length }});
    {% for trans in transitions %}
    try
        sourceName = '{{ trans.source_name | replace("'", "''") }}';
        targetName = '{{ trans.target_name | replace("'", "''") }}';
        fprintf('  - Creating transition: %s -> %s\n', sourceName, targetName);
        
        if isKey(stateMap, sourceName) && isKey(stateMap, targetName)
            sourceState = stateMap(sourceName);
            targetState = stateMap(targetName);

            t = Stateflow.Transition(chart);
            t.Source = sourceState;
            t.Destination = targetState;

            % Build transition label
            labelString = '';
            {% if trans.event %}
            labelString = '{{ trans.event | replace('%', '%%') | replace("'", "''") }}';
            {% endif %}
            {% if trans.condition and trans.condition.code %}
            labelString = [labelString, sprintf(' [%s]', '{{ trans.condition.code | replace('%', '%%') | replace("'", "''") }}')];
            {% endif %}
            {% if trans.action and trans.action.code %}
            labelString = [labelString, sprintf(' { %s }', '{{ trans.action.code | replace('%', '%%') | replace('\n', '; ') | replace("'", "''") }}')];
            {% endif %}
            t.LabelString = labelString;
        else
            warning('Could not create transition from "%s" to "%s": One or both states not found.', sourceName, targetName);
        end
    catch transErr
        warning('Could not create a transition: %s', transErr.message);
    end
    {% endfor %}
    
    % --- Finalization ---
    fprintf('Saving model to: %s\n', fullPath);
    save_system(modelName, fullPath);
    
    fprintf('Model generation completed.\n');
    fprintf('MATLAB_SCRIPT_SUCCESS:%s\n', fullPath);
    
catch err
    report = getReport(err, 'extended', 'hyperlinks', 'off');
    fprintf(2, 'Model generation failed: %s\n', report);
    fprintf('MATLAB_SCRIPT_FAILURE: %s\n', err.message);
end