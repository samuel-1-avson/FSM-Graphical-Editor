{# fsm_designer_project/templates/fsm_table.h.j2 - State Table Header #}
#ifndef {{ h_guard }}
#define {{ h_guard }}

#include <stdint.h>
#include <stdbool.h>

// --- FSM STATE ENUM ---
typedef enum {
{%- for state in states %}
    STATE_{{ state.c_name|upper }},
{%- endfor %}
    FSM_NUM_STATES
} FSM_State_t;

// --- FSM EVENT ENUM ---
{% if events -%}
typedef enum {
{%- for event in events %}
    EVENT_{{ event.c_name|upper }},
{%- endfor %}
    FSM_NUM_EVENTS
} FSM_Event_t;
{%- endif %}

// Typedefs for selected integer size
typedef {{ state_enum_type }} FSM_StateId_t;
typedef {{ event_enum_type }} FSM_EventId_t;

#define FSM_NO_EVENT -1

// --- FSM Data Structures for Table-Driven Approach ---

// A transition consists of an event, a condition check, an action, and the next state.
typedef struct {
    FSM_EventId_t event;
    bool (*condition)(void); // Pointer to a condition function (can be NULL)
    void (*action)(void);      // Pointer to a transition action function (can be NULL)
    FSM_StateId_t next_state;
} FSM_Transition_t;

// A state consists of its actions and a table of its possible transitions.
typedef struct {
    void (*entry_action)(void); // Pointer to an entry action function (can be NULL)
    void (*during_action)(void); // Pointer to a during action function (can be NULL)
    void (*exit_action)(void);  // Pointer to an exit action function (can be NULL)
    const FSM_Transition_t* transitions; // Pointer to this state's transition table
    uint8_t num_transitions;
} FSM_StateConfig_t;

// --- FSM CORE API ---
void {{ fsm_name_c }}_init(void);
void {{ fsm_name_c }}_run(FSM_EventId_t event_id);
FSM_StateId_t {{ fsm_name_c }}_get_current_state(void);

// --- User-defined Action & Condition Function Prototypes ---
{% for proto in action_prototypes %}
{{ proto }};
{%- endfor %}
{% for proto in condition_prototypes %}
{{ proto }};
{%- endfor %}

#endif // {{ h_guard }}