{# ======================================================================
   fsm_designer_project/templates/fsm_table.h.j2 - Improved State Table Header
   - Reentrant API with context handle
   - Optional state/event name tables
   - Tables declared here; defined in the .c for ROM placement
   - Config toggles (can be overridden by the generator or compile-time):
       enable_names: bool = true
   Expected inputs:
       h_guard, app_name, timestamp, fsm_name_c
       states: [{ c_name, original_name, is_initial? }]
       events: [{ c_name, original_name }] (optional)
       state_enum_type: e.g., "uint8_t"
       event_enum_type: e.g., "uint8_t" or "int16_t"
   ====================================================================== #}
#ifndef {{ h_guard }}
#define {{ h_guard }}
#pragma once

/* =========================================================================
 * Auto-generated FSM Header (Table-driven)
 *   Generated by: {{ app_name }}
 *   Generated on: {{ timestamp }}
 *
 * Notes:
 *   - This file is generated. Manual edits may be overwritten.
 *   - Reentrant API: multiple FSM instances can run concurrently.
 * ========================================================================= */

#ifdef __cplusplus
extern "C" {
#endif

/* ---- Visibility / Export macros -------------------------------------- */
#ifndef FSM_API
#  if defined(_WIN32) && !defined(FSM_STATIC)
#    ifdef FSM_EXPORTS
#      define FSM_API __declspec(dllexport)
#    else
#      define FSM_API __declspec(dllimport)
#    endif
#  else
#    define FSM_API
#  endif
#endif

/* ---- Common includes -------------------------------------------------- */
#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

/* ---- Configuration (can be overridden at compile time) --------------- */
{%- set enable_names = enable_names|default(true) %}

/* ---- State enumeration ------------------------------------------------ */
typedef enum {
{%- for st in states %}
    STATE_{{ st.c_name|upper }} = {{ loop.index0 }}, /* {{ st.original_name }} */
{%- endfor %}
    FSM_NUM_STATES
} FSM_State_t;

/* Initial state convenience macro */
{%- set initial = (states | selectattr('is_initial') | list | first) %}
#define FSM_INITIAL_STATE STATE_{{ (initial.c_name if initial else states[0].c_name)|upper }}

/* ---- Event enumeration ------------------------------------------------ */
{%- if events and events|length > 0 %}
typedef enum {
{%- for ev in events %}
    EVENT_{{ ev.c_name|upper }} = {{ loop.index0 }}, /* {{ ev.original_name }} */
{%- endfor %}
    FSM_NUM_EVENTS
} FSM_Event_t;
{%- else %}
typedef enum {
    FSM_NUM_EVENTS = 0
} FSM_Event_t;
{%- endif %}

/* ---- ID storage types ------------------------------------------------- */
typedef {{ state_enum_type|default('uint8_t') }} FSM_StateId_t;
typedef {{ event_enum_type|default('uint8_t') }} FSM_EventId_t;

/* Typed special "no event" value */
#define FSM_NO_EVENT ((FSM_EventId_t)(-1))

/* ---- Forward-declared handle/context --------------------------------- */
typedef struct {{ fsm_name_c }}_s {
    FSM_StateId_t state;  /* Current state id */
    void*         user;   /* Optional user context pointer */
} {{ fsm_name_c }}_t;

/* ---- Function pointer types (guards/actions) ------------------------- */
/* Signatures use no parameters for maximum portability. If you need
 * context-aware callbacks (fsm pointer, event id), you can adapt the
 * .c generator to wrap them or extend these typedefs. */
typedef bool (*FSM_ConditionFn)(void);
typedef void (*FSM_ActionFn)(void);

/* ---- Table structures ------------------------------------------------- */
typedef struct {
    FSM_EventId_t   event;       /* Triggering event id */
    FSM_ConditionFn condition;   /* Guard (NULL => true) */
    FSM_ActionFn    action;      /* Transition action (NULL => no-op) */
    FSM_StateId_t   next_state;  /* Destination state */
} FSM_Transition_t;

typedef struct {
    FSM_ActionFn              entry_action;   /* Entry action (NULL => none) */
    FSM_ActionFn              during_action;  /* During action (NULL => none) */
    FSM_ActionFn              exit_action;    /* Exit action (NULL => none) */
    const FSM_Transition_t*   transitions;    /* Per-state transitions table */
    size_t                    num_transitions;/* Count of transitions */
} FSM_StateConfig_t;

/* ---- Optional state/event names -------------------------------------- */
{%- if enable_names %}
FSM_API extern const char* const {{ fsm_name_c }}_state_names[FSM_NUM_STATES];
{%- if events and events|length > 0 %}
FSM_API extern const char* const {{ fsm_name_c }}_event_names[FSM_NUM_EVENTS];
{%- endif %}

/* Optional lookup helpers (implemented in the .c) */
FSM_API const char* {{ fsm_name_c }}_state_name(FSM_StateId_t id);
{%- if events and events|length > 0 %}
FSM_API const char* {{ fsm_name_c }}_event_name(FSM_EventId_t id);
{%- endif %}
{%- endif %}

/* ---- Table declaration (defined in the .c) --------------------------- */
FSM_API extern const FSM_StateConfig_t {{ fsm_name_c }}_state_table[FSM_NUM_STATES];

/* ---- Core API --------------------------------------------------------- */
/**
 * Initialize an FSM instance.
 * @param fsm  Pointer to FSM handle (must not be NULL).
 * @param user Optional user context pointer (stored in fsm->user).
 */
FSM_API void {{ fsm_name_c }}_init({{ fsm_name_c }}_t* fsm, void* user);

/**
 * Dispatch one event to the FSM.
 * Pass FSM_NO_EVENT to execute "during" actions only.
 * @param fsm      Pointer to FSM handle (must not be NULL).
 * @param event_id Event id (FSM_Event_t) or FSM_NO_EVENT.
 */
FSM_API void {{ fsm_name_c }}_dispatch({{ fsm_name_c }}_t* fsm, FSM_EventId_t event_id);

/**
 * Get the current state id.
 * @param fsm Pointer to FSM handle (must not be NULL).
 * @return Current state id.
 */
FSM_API FSM_StateId_t {{ fsm_name_c }}_current_state(const {{ fsm_name_c }}_t* fsm);

/* ---- User-defined Action & Condition Function Prototypes ------------- */
/* Implement these in your application code. */
{%- for proto in action_prototypes %}
{{ proto }};
{%- endfor %}
{%- for proto in condition_prototypes %}
{{ proto }};
{%- endfor %}

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif /* {{ h_guard }} */