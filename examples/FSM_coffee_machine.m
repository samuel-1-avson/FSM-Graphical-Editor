
% =================================================================================
% MATLAB FSM Instance Class for: coffee_machine
%
% Generated by:   Brain State Machine Designer v2.0.0
% Generated on:   2025-08-08 14:18:36
%
% Description:
% This class provides a robust, object-oriented API for Python to interact with
% the generated Simulink FSM model ('coffee_machine.slx'). It acts as a handle,
% managing the model's lifecycle, simulation, data streaming, and code generation.
%
% Key Methods:
%   - run_simulation(config): Executes a simulation with specified parameters.
%   - generate_code(config): Triggers code generation using Simulink Coder.
%   - setup_data_streaming(): Configures real-time monitoring callbacks.
%   - cleanup(): Closes the model and cleans up resources.
% =================================================================================

classdef FSM_coffee_machine < handle
    
    properties (Access = public)
        ModelName           % Name of the Simulink model (e.g., 'fsm_model')
        ModelPath           % Full path to the .slx file
        IsLoaded            % Flag indicating if the model is loaded in memory
        LastSimOutput       % Stores the output from the last simulation run
        LastCodeGenResult   % Stores the result from the last code generation
    end
    
    methods
        
        function obj = FSM_coffee_machine(model_path)
            % Constructor: Initializes and loads the Simulink model.
            obj.ModelName = 'coffee_machine';
            obj.ModelPath = model_path;
            
            obj._log('Initializing FSM handle for model "%s"...', obj.ModelName);
            
            try
                % Ensure required toolboxes are available
                obj.validate_environment();
                
                % Close the model if it's already loaded to ensure a clean state
                if bdIsLoaded(obj.ModelName)
                    obj._log('Model "%s" is already loaded. Closing it first.', obj.ModelName);
                    close_system(obj.ModelName, 0);
                end
                
                % Load the Simulink model from the specified path
                obj._log('Loading model from: %s', obj.ModelPath);
                load_system(obj.ModelPath);
                obj.IsLoaded = true;
                obj._log('Model "%s" loaded successfully.', obj.ModelName);
                
            catch e
                obj._log_error('Failed to initialize FSM handle: %s', e.message);
                rethrow(e);
            end
        end
        
        function validate_environment(obj)
            % Validates that required MathWorks toolboxes are available.
            obj._log('Validating MATLAB environment...');
            if isempty(ver('Simulink'))
                error('MATLAB:ValidationFailed', 'Simulink is not installed or not in the path.');
            end
            if isempty(ver('Stateflow'))
                error('MATLAB:ValidationFailed', 'Stateflow is not installed or not in the path.');
            end
            obj._log('Environment validation passed.');
        end

        function setup_data_streaming(obj)
            % Configures data streaming callbacks for real-time monitoring from Python.
            % This sets up a 'PostStep' listener that prints JSON to stdout.
            obj._log('Setting up data streaming callback...');
            
            % IMPORTANT: This callback assumes the Stateflow chart has output ports
            % named 'State_Name_Out' and 'Transition_Count_Out'.
            callback_code = [...
                'sim_time = get_param(bdroot, ''SimulationTime'');', ...
                'try;', ...
                '    state_name_obj = get_param([bdroot ''/State_Name_Out''], ''RunTimeObject'');', ...
                '    state_name = string(state_name_obj.InputPort(1).Data);', ...
                '    trans_count_obj = get_param([bdroot ''/Transition_Count_Out''], ''RunTimeObject'');', ...
                '    trans_count = double(trans_count_obj.InputPort(1).Data);', ...
                'catch;', ...
                '    state_name = ''Fetching...'';', ...
                '    trans_count = -1;', ...
                'end;', ...
                'fprintf(''SIM_DATA:{"time":%f, "state":"%s", "transition_count":%d}\\n'', sim_time, state_name, trans_count);' ...
            ];
            
            % Set up 'StartFcn' to add the listener at the beginning of the simulation.
            start_fcn_code = sprintf([...
                'h = add_exec_event_listener(bdroot, ''PostStep'', ''%s'');', ...
                'set_param(bdroot, ''UserData'', struct(''SimListener'', h));' ...
            ], strrep(callback_code, '''', ''''''));
            
            set_param(obj.ModelName, 'StartFcn', start_fcn_code);
            
            % Set up 'StopFcn' to clean up the listener at the end of the simulation.
            stop_fcn_code = [...
                'ud = get_param(bdroot, ''UserData''); ', ...
                'if isfield(ud, ''SimListener'') && ~isempty(ud.SimListener), ', ...
                '    rm_exec_event_listener(ud.SimListener); ', ...
                'end;' ...
            ];
            set_param(obj.ModelName, 'StopFcn', stop_fcn_code);
            
            obj._log('Data streaming configured.');
        end
        
        function run_simulation(obj, config)
            % Runs a simulation with the provided configuration struct.
            obj._log('Configuring simulation for "%s"...', obj.ModelName);
            
            % Apply simulation parameters from the config struct
            param_fields = fieldnames(config);
            for i = 1:length(param_fields)
                param = param_fields{i};
                value = config.(param);
                
                try
                    set_param(obj.ModelName, param, value);
                    obj._log('  - Set %s = %s', param, value);
                catch paramErr
                    obj._log_error('  - Warning: Could not set %s: %s', param, paramErr.message);
                end
            end
            
            % Run simulation and capture output
            obj._log('Starting simulation...');
            tic; % Start timer
            simIn = Simulink.SimulationInput(obj.ModelName);
            obj.LastSimOutput = sim(simIn);
            wall_clock_time = toc; % End timer
            obj._log('Simulation finished in %.2f seconds.', wall_clock_time);
            
            % Process and structure results into a MATLAB struct
            results = struct();
            results.metadata = struct('wall_clock_time', wall_clock_time, ...
                                      'stop_time', str2double(get_param(obj.ModelName, 'StopTime')), ...
                                      'solver', get_param(obj.ModelName, 'Solver'));
            
            results.data = struct();
            if isprop(obj.LastSimOutput, 'state_names')
                results.data.state_names = obj.LastSimOutput.state_names;
                results.data.final_state = results.data.state_names.Data(end);
            end
            
            if isprop(obj.LastSimOutput, 'transition_counts')
                results.data.transition_counts = obj.LastSimOutput.transition_counts;
                results.data.total_transitions = results.data.transition_counts.Data(end);
            end
            
            results.performance = struct('solver_stats', obj.LastSimOutput.SimulationMetadata.SolverInfo);
            
            % Convert the results struct to a JSON string and print to stdout for Python
            fprintf('MATLAB_SCRIPT_SUCCESS:%s\n', jsonencode(results));
            obj._log('Results processed and encoded to JSON.');
        end
        
        function resultsJson = generate_code(obj, config)
            % Generates C/C++ code from the model using Simulink Coder.
            obj._log('Configuring code generation for "%s"...', obj.ModelName);
            
            % Apply code generation parameters from the config struct
            param_fields = fieldnames(config);
            for i = 1:length(param_fields)
                param = param_fields{i};
                value = config.(param);
                
                try
                    set_param(obj.ModelName, param, value);
                    obj._log('  - Set CodeGen Param: %s = %s', param, value);
                catch paramErr
                    obj._log_error('  - Warning: Could not set %s: %s', param, paramErr.message);
                end
            end
            
            % Start code generation
            obj._log('Starting code generation...');
            tic;
            rtwbuild(obj.ModelName);
            wall_clock_time = toc;
            obj._log('Code generation finished in %.2f seconds.', wall_clock_time);
            
            % Structure and return results
            results = struct();
            build_info = load(fullfile(Simulink.fileGenControl('get', 'CodeGenFolder'), ...
                                       obj.ModelName, 'buildInfo.mat'));
            results.output_directory = build_info.buildInfo.Settings.LocalAnchorDir;
            results.wall_clock_time = wall_clock_time;
            
            obj.LastCodeGenResult = results;
            resultsJson = jsonencode(results);
        end
        
        function cleanup(obj)
            % Cleans up and closes the model.
            if obj.IsLoaded && bdIsLoaded(obj.ModelName)
                obj._log('Closing model "%s".', obj.ModelName);
                close_system(obj.ModelName, 0);
                obj.IsLoaded = false;
            end
        end
    end % methods
    
    methods (Access = private)
        function _log(obj, format, varargin)
            % Private logging helper for consistent output.
            timestamp = datestr(now, 'HH:MM:SS.FFF');
            fprintf('[%s] %s: %s\n', timestamp, obj.class, sprintf(format, varargin{:}));
        end
        
        function _log_error(obj, format, varargin)
            % Private error logging helper.
            timestamp = datestr(now, 'HH:MM:SS.FFF');
            fprintf(2, '[%s] %s ERROR: %s\n', timestamp, obj.class, sprintf(format, varargin{:}));
        end
    end % private methods
    
end % classdef