% =================================================================================
% MATLAB FSM Instance Class for: traffic_light
%
% Generated by:   BSM Designer
% Generated on:   2025-08-08 12:24:45
%
% Description:
% This class acts as a handle to the generated Simulink FSM model. It
% provides a clean, object-oriented API for Python to control simulation
% and code generation without sending large, multi-line scripts.
% =================================================================================

classdef FSM_traffic_light < handle
    
    properties
        modelName           % Name of the Simulink model
        modelPath           % Full path to the .slx file
        isLoaded            % Flag indicating if the model is loaded
        lastSimOutput       % Stores the output of the last simulation
    end
    
    methods
        
        function obj = FSM_traffic_light(model_path)
            % Constructor: Initialize and load the Simulink model
            obj.modelName = 'traffic_light';
            obj.modelPath = model_path;
            
            fprintf('MATLAB_FSM_CLASS: Loading model %s...\n', obj.modelName);
            
            % Close model if already loaded
            if bdIsLoaded(obj.modelName)
                close_system(obj.modelName, 0);
            end
            
            % Load the model
            load_system(model_path);
            obj.isLoaded = true;
            fprintf('MATLAB_FSM_CLASS: Model %s loaded successfully.\n', obj.modelName);
        end
        
        function setup_data_streaming(obj)
            % Configure data streaming callbacks for real-time monitoring
            fprintf('MATLAB_FSM_CLASS: Setting up data streaming callback...\n');
            
            % Define callback code for data streaming
            callback_code = [...
                'sim_time = get_param(bdroot, ''SimulationTime'');', ...
                'try;', ...
                '    state_name_obj = get_param([bdroot ''/State_Name_Out''], ''RunTimeObject'');', ...
                '    state_name = string(state_name_obj.InputPort(1).Data);', ...
                'catch;', ...
                '    state_name = ''Fetching...'';', ...
                'end;', ...
                'fprintf(''SIM_DATA:{"time":%f, "state":"%s"}\\n'', sim_time, state_name);' ...
            ];
            
            % Set up start function with event listener
            start_fcn_code = sprintf([...
                'h = add_exec_event_listener(bdroot, ''PostStep'', ''%s'');', ...
                'set_param(bdroot, ''UserData'', struct(''SimListener'', h));' ...
            ], strrep(callback_code, '''', ''''''));
            
            set_param(obj.modelName, 'StartFcn', start_fcn_code);
            
            % Set up stop function to clean up listener
            stop_fcn_code = [...
                'ud = get_param(bdroot, ''UserData''); ', ...
                'if isfield(ud, ''SimListener'') && ~isempty(ud.SimListener), ', ...
                '    rm_exec_event_listener(ud.SimListener); ', ...
                'end;' ...
            ];
            set_param(obj.modelName, 'StopFcn', stop_fcn_code);
            
            fprintf('MATLAB_FSM_CLASS: Data streaming configured.\n');
        end
        
        function resultsJson = run(obj, config)
            % Run simulation with provided configuration
            fprintf('MATLAB_FSM_CLASS: Configuring simulation for %s...\n', obj.modelName);
            
            % Configure simulation parameters
            param_fields = fieldnames(config);
            for i = 1:length(param_fields)
                param = param_fields{i};
                value = config.(param);
                
                % Get current solver type to avoid parameter conflicts
                current_solver_type = get_param(obj.modelName, 'SolverType');
                
                % Skip conflicting parameters based on solver type
                if strcmp(param, 'SampleTimeConstraint')
                    fprintf('  - Skipped %s (causes conflicts with %s solver)\n', ...
                            param, current_solver_type);
                    continue;
                end
                
                if strcmp(param, 'FixedStep') && strcmpi(current_solver_type, 'Variable-step')
                    fprintf('  - Skipped %s for Variable-step solver\n', param);
                    continue;
                end
                
                if strcmp(param, 'MaxStep') && strcmpi(current_solver_type, 'Fixed-step')
                    fprintf('  - Skipped %s for Fixed-step solver\n', param);
                    continue;
                end
                
                % Attempt to set parameter
                try
                    set_param(obj.modelName, param, value);
                    fprintf('  - Set %s = %s\n', param, value);
                catch paramErr
                    fprintf('  - Warning: Could not set %s: %s\n', param, paramErr.message);
                end
            end
            
            % Run simulation
            fprintf('MATLAB_FSM_CLASS: Starting simulation...\n');
            simIn = Simulink.SimulationInput(obj.modelName);
            obj.lastSimOutput = sim(simIn);
            fprintf('MATLAB_FSM_CLASS: Simulation finished. Processing results...\n');
            
            % Process and structure results
            results = struct();
            results.simulation_time = obj.lastSimOutput.SimulationMetadata.TimingInfo.ExecutionWallClockTime;
            results.stop_time = str2double(get_param(obj.modelName, 'StopTime'));
            results.solver = get_param(obj.modelName, 'Solver');
            
            % Add output data if available
            if isprop(obj.lastSimOutput, 'yout')
                results.yout = obj.lastSimOutput.yout;
            end
            
            % Add state information if available
            if isprop(obj.lastSimOutput, 'state_names')
                results.state_names = obj.lastSimOutput.state_names;
                results.final_state = results.state_names.Data(end);
            end
            
            % Add transition counts if available
            if isprop(obj.lastSimOutput, 'transition_counts')
                results.transition_counts = obj.lastSimOutput.transition_counts;
                results.total_transitions = results.transition_counts.Data(end);
            end
            
            % Add performance metrics
            results.performance.solver_stats = obj.lastSimOutput.SimulationMetadata.SolverInfo;
            
            % Convert to JSON and return
            resultsJson = jsonencode(results);
            fprintf('MATLAB_FSM_CLASS: Results processed.\n');
        end
        
        function cleanup(obj)
            % Clean up and close the model
            if obj.isLoaded && bdIsLoaded(obj.modelName)
                fprintf('MATLAB_FSM_CLASS: Closing model %s.\n', obj.modelName);
                close_system(obj.modelName, 0);
                obj.isLoaded = false;
            end
        end
        
    end % methods
    
end % classdef