/*
 * Raspberry Pi Pico FSM for: {{ fsm_name_c }}
 * Target: C/C++ SDK
 * Generated by: BSM Designer
 */
#include <stdio.h>
#include "pico/stdlib.h"
#include "{{ fsm_name_c }}.h"

// --- Pico-specific Setup ---
// TODO: Define your hardware pins here
// const uint LED_PIN = PICO_DEFAULT_LED_PIN;
// const uint BUTTON_PIN = 15;

// TODO: Add any global variables or timer/interrupt handlers here

int main() {
    // Initialize stdio for printf over USB or UART
    stdio_init_all();
    
    // TODO: Initialize your GPIOs here
    // gpio_init(LED_PIN);
    // gpio_set_dir(LED_PIN, GPIO_OUT);
    // gpio_init(BUTTON_PIN);
    // gpio_set_dir(BUTTON_PIN, GPIO_IN);
    // gpio_pull_up(BUTTON_PIN);

    // Initialize the Finite State Machine
    {{ fsm_name_c }}_init();
    printf("Pico FSM Initialized. State: %d\n", {{ fsm_name_c }}_get_current_state());

    while (true) {
        // --- Event Detection ---
        // TODO: Implement your event detection logic here
        // Example: Polling a button
        // if (!gpio_get(BUTTON_PIN)) { // Active low
        //     {{ fsm_name_c }}_run(EVENT_BUTTON_PRESS);
        //     sleep_ms(200); // Simple debounce
        // }
        
        // Run the FSM's "during" actions
        {{ fsm_name_c }}_run(FSM_NO_EVENT);
        
        sleep_ms(10);
    }
    return 0; // Should not be reached
}

// --- FSM IMPLEMENTATION (Auto-Generated) ---
// (This section is the same as the Arduino template's FSM logic)
// ...

// --- ACTION IMPLEMENTATIONS (User Stubs) ---
// TODO: Implement your action logic here
// Example stubs will use Pico SDK functions like gpio_put()
// ...