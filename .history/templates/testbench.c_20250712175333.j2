/*
 * =================================================================================
 * FSM Testbench for: {{ fsm_name_c }}
 *
 * Generated by:      {{ app_name }} v{{ app_version }}
 * Generated on:      {{ timestamp }}
 *
 * How to Use:
 * 1. Compile this file along with the generated FSM source ({{ fsm_name_c }}.c).
 *    Example GCC command:
 *    gcc -o test_runner {{ fsm_name_c }}.c {{ fsm_name_c }}_test.c -I.
 *
 * 2. Run the compiled executable: ./test_runner
 *
 * 3. Uncomment and modify the test sequences below to validate your FSM's logic.
 * =================================================================================
 */

#include <stdio.h>
#include <assert.h>
#include "{{ fsm_name_c }}.h"

// --- Test Helper Functions ---

// Array of state names for easy printing.
const char* FSM_STATE_NAMES[] = {
{%- for state in states %}
    "{{ state.name }}"{% if not loop.last %},{% endif %}
{%- endfor %}
};

// Helper to print the current state in a readable format.
void print_current_state(const char* context_msg) {
    FSM_State_t current_state_id = {{ fsm_name_c }}_get_current_state();
    
    printf("[%s] Current State: %s (%d)\n",
           context_msg,
           (current_state_id < FSM_NUM_STATES) ? FSM_STATE_NAMES[current_state_id] : "Invalid State",
           current_state_id);
}


int main() {
    printf("--- FSM Testbench for '{{ fsm_name_c }}' ---\n\n");

    // Initialize the FSM
    {{ fsm_name_c }}_init();
    print_current_state("After Init");
    assert({{ fsm_name_c }}_get_current_state() == {{ initial_state_c_enum }});

    printf("\n--- Starting Test Sequence ---\n");

    // --- TODO: Define and run your test cases here ---
    // Uncomment and adapt the blocks below.

{% for event in events %}
    /*
    // Test Case: Triggering event {{ event.c_name|upper }}
    printf("\n--> Triggering event: {{ event.c_name|upper }}\n");
    // TODO: Set any required variable values or mock conditions before triggering
    
    {{ fsm_name_c }}_run(EVENT_{{ event.c_name|upper }});
    print_current_state("After EVENT_{{ event.c_name|upper }}");
    
    // TODO: Add an assertion to check if the FSM is in the expected state
    // assert({{ fsm_name_c }}_get_current_state() == EXPECTED_STATE);
    */
{%- else %}
    // No events with names were found in the diagram to generate test cases for.
    // You can test "during" actions by running the FSM with FSM_NO_EVENT.
    /*
    printf("\n--> Running an internal step (for 'during' actions)\n");
    {{ fsm_name_c }}_run(FSM_NO_EVENT);
    print_current_state("After internal step");
    */
{%- endfor %}

    printf("\n--- Testbench Finished Successfully ---\n");
    return 0;
}