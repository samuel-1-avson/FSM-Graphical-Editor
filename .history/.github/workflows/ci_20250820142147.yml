name: Python Application CI

# 1. TRIGGER: When does this workflow run?
on:
  push:
    branches: ["main", "develop"] # Runs on pushes to main or develop branches
  pull_request:
    branches: ["main", "develop"] # Runs on pull requests targeting main or develop

jobs:
  # Define a job named 'build-and-test'
  build-and-test:
    # 2. MATRIX: Run this job on multiple operating systems
    strategy:
      fail-fast: false # Don't cancel other jobs if one fails
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        python-version: ["3.11"] # You can add more versions like "3.9", "3.10"

    # 3. RUNNER: Specify the virtual machine environment
    runs-on: ${{ matrix.os }}

    # 4. STEPS: The sequence of tasks to perform
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install system dependencies (for Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pyqt6.qt6 --no-install-recommends
          sudo apt-get install -y libxcb-cursor0 # Common dependency for Qt on headless systems
          sudo apt-get install -y libgraphviz-dev # For pygraphviz

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-qt pytest-cov ruff # Ensure dev tools are installed

      - name: Lint with Ruff
        run: |
          # Stop the build if there are any formatting issues or lint errors
          ruff format --check .
          ruff check .

      - name: Test with pytest
        run: |
          # For Linux, we need to run with a virtual framebuffer for UI tests
          # The 'xvfb-run' command handles this.
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            xvfb-run pytest --cov=fsm_designer_project --cov-report=xml
          else
            pytest --cov=fsm_designer_project --cov-report=xml
          fi

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }} # Optional: for private repos or advanced reporting
          file: ./coverage.xml
          flags: ${{ matrix.os }} # Label coverage report by OS
          name: codecov-umbrella
