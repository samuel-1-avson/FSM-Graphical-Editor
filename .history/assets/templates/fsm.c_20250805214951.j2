
{# bsm_designer_project/templates/fsm.c.j2 - Jinja2 Template for C Source (Switch-Case) #}
#include "{{ fsm_name_c }}.h"
#include <stdio.h> // For basic printf in stubs

// --- PRIVATE FSM VARIABLES ---
static FSM_StateId_t current_fsm_state;

// --- USER-DEFINED FSM VARIABLES (declare as static) ---
// Example: static int my_fsm_counter = 0;


// --- FSM CORE IMPLEMENTATIONS ---

FSM_API void {{ fsm_name_c }}_init(void) {
    current_fsm_state = STATE_{{ initial_state_c_enum.replace('STATE_', '') }};
    // Call entry action for initial state, if any
{%- if initial_state_entry_func %}
    {{ initial_state_entry_func }}();
{%- endif %}
}

FSM_API FSM_StateId_t {{ fsm_name_c }}_get_current_state(void) {
    return current_fsm_state;
}

FSM_API void {{ fsm_name_c }}_run(FSM_EventId_t event_id) {
    FSM_StateId_t previous_state = current_fsm_state;
    FSM_StateId_t next_state = current_fsm_state; // Assume no transition initially
    int transition_taken = 0;

    switch (current_fsm_state) {
{%- for state in states %}
        case STATE_{{ state.c_name|upper }}: {
        {%- if state.during_action_func %}
            if (event_id == FSM_NO_EVENT) { // Process 'during' action if no specific event
                {{ state.during_action_func }}();
            }
        {%- endif %}

        {%- for trans in state.transitions %}
            {% if loop.first -%}if{% else -%} else if{% endif %} ((event_id == EVENT_{{ trans.event.c_name|upper }}){%- if trans.condition_str %} && ({{ trans.condition_str }}){% endif %}) {
            {%- if state.exit_action_func %}
                {{ state.exit_action_func }}(); // Exit action for '{{ state.name }}'
            {%- endif %}
            {%- if trans.action_func %}
                {{ trans.action_func }}(); // Transition action
            {%- endif %}
                next_state = STATE_{{ trans.target_c_name|upper }};
                transition_taken = 1;
            }
        {%- endfor %}
            break;
        }
{% endfor %}
        default:
            // Unhandled FSM state
            break;
    } // end switch (current_fsm_state)

    if (transition_taken && next_state != previous_state) {
        // Update state *before* calling entry action of the new state
        current_fsm_state = next_state;
        switch (next_state) {
    {%- for state in states %}
        {%- if state.entry_action_func %}
            case STATE_{{ state.c_name|upper }}: {{ state.entry_action_func }}(); break;
        {%- endif %}
    {%- endfor %}
            default: /* No entry action for this state or unknown */ break;
        }
    }
}


// --- USER-DEFINED ACTION IMPLEMENTATIONS (STUBS) ---
// Replace the contents of these functions with your custom logic.
{% for func_sig, code, source_info in action_functions %}
{{ func_sig }} {
    {%- if options.include_comments %}
    // {{ source_info }}
    // Original Python-like action(s):
    // {{ code|replace("\n", "\n    // ") }}
    {%- endif %}
{%- for stub_line in code_to_c_stub(code) %}
{{ stub_line }}
{%- endfor %}
}

{% endfor %}
